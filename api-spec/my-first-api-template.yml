openapi: 3.0.0
info:
  title: Lambda Proxy Integration Example
  version: 1.0.0

paths:
  /{proxy+}:
    options:
      summary: CORS support
      description: Enable CORS by returning correct headers
      responses:
        '200':
          description: Default response for CORS
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${region}:${account_id}:function:${hello-world-fn}/invocations
        responses:
          $default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
    x-amazon-apigateway-any-method:
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      security:
        - api_key: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        type: aws_proxy
        uri: arn:aws:apigateway:${region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${region}:${account_id}:function:${hello-world-fn}/invocations
        responses:
          default:
            statusCode: 200
            type: aws_proxy
        passthroughBehavior: when_no_match
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header